#!/usr/bin/env python3
"""
Sistema de Scheduler Autom√°tico para Gera√ß√£o de OS baseado em PMPs
Executa em background para gerar OS automaticamente sem interven√ß√£o manual
"""

import os
import sys
import time
import logging
import schedule
from datetime import datetime, timedelta
from threading import Thread

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('pmp_scheduler.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('pmp_scheduler')

class PMPSchedulerAutomatico:
    """Scheduler autom√°tico para gera√ß√£o de OS baseado em PMPs"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.last_execution = None
        self.execution_count = 0
        
    def executar_geracao_automatica(self):
        """Executa gera√ß√£o autom√°tica de OS"""
        try:
            logger.info("ü§ñ Iniciando execu√ß√£o autom√°tica de gera√ß√£o de OS")
            
            # Importar dentro da fun√ß√£o para evitar problemas de contexto
            from app import create_app
            from sistema_geracao_os_pmp_aprimorado import gerar_todas_os_pmp
            
            # Criar contexto da aplica√ß√£o
            app = create_app()
            
            with app.app_context():
                # Executar gera√ß√£o
                resultado = gerar_todas_os_pmp()
                
                if resultado['success']:
                    stats = resultado['estatisticas']
                    os_geradas = stats['os_geradas']
                    pmps_processadas = stats['pmps_processadas']
                    
                    logger.info(f"‚úÖ Execu√ß√£o conclu√≠da: {os_geradas} OS geradas de {pmps_processadas} PMPs processadas")
                    
                    # Log detalhado se OS foram geradas
                    if os_geradas > 0:
                        logger.info(f"üìã Detalhes: {stats['os_ja_existentes']} OS j√° existiam, {stats['erros']} erros")
                        
                        # Log das OS geradas (primeiras 5)
                        if 'os_geradas' in resultado and resultado['os_geradas']:
                            logger.info("üÜï Novas OS geradas:")
                            for i, os in enumerate(resultado['os_geradas'][:5], 1):
                                logger.info(f"  {i}. OS #{os['id']}: {os['descricao']}")
                            
                            if len(resultado['os_geradas']) > 5:
                                logger.info(f"  ... e mais {len(resultado['os_geradas']) - 5} OS")
                    
                    self.last_execution = datetime.now()
                    self.execution_count += 1
                    
                else:
                    logger.error(f"‚ùå Erro na execu√ß√£o autom√°tica: {resultado['error']}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico na execu√ß√£o autom√°tica: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    def verificar_sistema(self):
        """Verifica status do sistema"""
        try:
            logger.info("üîç Verificando status do sistema PMP")
            
            from app import create_app
            from sistema_geracao_os_pmp_aprimorado import verificar_pendencias_os_pmp
            
            app = create_app()
            
            with app.app_context():
                resultado = verificar_pendencias_os_pmp()
                
                if resultado['success']:
                    total_pendencias = resultado['total_pmps_com_pendencias']
                    total_os_pendentes = resultado['total_os_pendentes']
                    
                    if total_pendencias > 0:
                        logger.info(f"‚ö†Ô∏è Sistema tem {total_pendencias} PMPs com {total_os_pendentes} OS pendentes")
                    else:
                        logger.info("‚úÖ Sistema em dia - nenhuma pend√™ncia encontrada")
                else:
                    logger.warning(f"‚ö†Ô∏è Erro ao verificar pend√™ncias: {resultado['error']}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar sistema: {e}")
    
    def configurar_agendamentos(self):
        """Configura os agendamentos autom√°ticos"""
        logger.info("üìÖ Configurando agendamentos autom√°ticos")
        
        # Execu√ß√£o principal: todos os dias √†s 6h da manh√£
        schedule.every().day.at("06:00").do(self.executar_geracao_automatica)
        logger.info("  ‚è∞ Gera√ß√£o autom√°tica agendada para 06:00 diariamente")
        
        # Execu√ß√£o adicional: todos os dias √†s 18h
        schedule.every().day.at("18:00").do(self.executar_geracao_automatica)
        logger.info("  ‚è∞ Gera√ß√£o autom√°tica agendada para 18:00 diariamente")
        
        # Verifica√ß√£o de sistema: a cada 2 horas durante hor√°rio comercial
        for hora in [8, 10, 12, 14, 16]:
            schedule.every().day.at(f"{hora:02d}:00").do(self.verificar_sistema)
        logger.info("  üîç Verifica√ß√µes de sistema agendadas para hor√°rio comercial")
        
        # Execu√ß√£o de emerg√™ncia: a cada 30 minutos durante hor√°rio comercial
        # (apenas se houver pend√™ncias cr√≠ticas)
        schedule.every(30).minutes.do(self.verificar_e_executar_se_necessario)
        logger.info("  üö® Verifica√ß√£o de emerg√™ncia a cada 30 minutos")
    
    def verificar_e_executar_se_necessario(self):
        """Verifica se h√° pend√™ncias cr√≠ticas e executa se necess√°rio"""
        try:
            # S√≥ executar durante hor√°rio comercial (7h √†s 19h)
            agora = datetime.now()
            if not (7 <= agora.hour <= 19):
                return
            
            from app import create_app
            from sistema_geracao_os_pmp_aprimorado import verificar_pendencias_os_pmp
            
            app = create_app()
            
            with app.app_context():
                resultado = verificar_pendencias_os_pmp()
                
                if resultado['success']:
                    total_os_pendentes = resultado['total_os_pendentes']
                    
                    # Executar se h√° mais de 5 OS pendentes
                    if total_os_pendentes > 5:
                        logger.warning(f"üö® Execu√ß√£o de emerg√™ncia: {total_os_pendentes} OS pendentes")
                        self.executar_geracao_automatica()
                        
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de emerg√™ncia: {e}")
    
    def executar_loop(self):
        """Loop principal do scheduler"""
        logger.info("üöÄ Iniciando loop do scheduler autom√°tico")
        
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # Verificar a cada minuto
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Interrup√ß√£o manual recebida")
                break
            except Exception as e:
                logger.error(f"‚ùå Erro no loop do scheduler: {e}")
                time.sleep(60)  # Aguardar antes de tentar novamente
        
        logger.info("üõë Loop do scheduler finalizado")
    
    def iniciar(self):
        """Inicia o scheduler em thread separada"""
        if self.running:
            logger.warning("‚ö†Ô∏è Scheduler j√° est√° executando")
            return
        
        logger.info("üé¨ Iniciando scheduler autom√°tico de PMPs")
        
        self.running = True
        self.configurar_agendamentos()
        
        # Executar primeira verifica√ß√£o imediatamente
        logger.info("üîÑ Executando verifica√ß√£o inicial")
        self.verificar_sistema()
        
        # Iniciar thread do loop
        self.thread = Thread(target=self.executar_loop, daemon=True)
        self.thread.start()
        
        logger.info("‚úÖ Scheduler autom√°tico iniciado com sucesso")
    
    def parar(self):
        """Para o scheduler"""
        logger.info("üõë Parando scheduler autom√°tico")
        
        self.running = False
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=5)
        
        logger.info("‚úÖ Scheduler autom√°tico parado")
    
    def status(self):
        """Retorna status do scheduler"""
        return {
            'running': self.running,
            'last_execution': self.last_execution.isoformat() if self.last_execution else None,
            'execution_count': self.execution_count,
            'next_runs': [str(job.next_run) for job in schedule.jobs[:3]]
        }

# Inst√¢ncia global do scheduler
scheduler_instance = None

def iniciar_scheduler():
    """Inicia o scheduler global"""
    global scheduler_instance
    
    if scheduler_instance is None:
        scheduler_instance = PMPSchedulerAutomatico()
    
    scheduler_instance.iniciar()
    return scheduler_instance

def parar_scheduler():
    """Para o scheduler global"""
    global scheduler_instance
    
    if scheduler_instance:
        scheduler_instance.parar()

def status_scheduler():
    """Retorna status do scheduler global"""
    global scheduler_instance
    
    if scheduler_instance:
        return scheduler_instance.status()
    else:
        return {'running': False, 'message': 'Scheduler n√£o inicializado'}

if __name__ == "__main__":
    # Execu√ß√£o direta do script
    import signal
    
    def signal_handler(sig, frame):
        logger.info("üõë Sinal de interrup√ß√£o recebido")
        if scheduler_instance:
            scheduler_instance.parar()
        sys.exit(0)
    
    # Configurar handler para SIGINT (Ctrl+C)
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        # Iniciar scheduler
        scheduler = iniciar_scheduler()
        
        logger.info("üéØ Scheduler autom√°tico de PMPs em execu√ß√£o")
        logger.info("   Pressione Ctrl+C para parar")
        
        # Manter o processo vivo
        while scheduler.running:
            time.sleep(1)
            
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)
