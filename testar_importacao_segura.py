#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar se a importa√ß√£o segura evita conflitos de tabela
"""

import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def testar_importacao_multipla():
    """Testa se m√∫ltiplas importa√ß√µes n√£o causam conflito"""
    print("üîÑ Testando m√∫ltiplas importa√ß√µes...")
    
    try:
        # Importar m√∫ltiplas vezes para simular o problema em produ√ß√£o
        for i in range(10):
            from routes.relatorio_52_semanas import get_model_safe
            
            # Tentar importar os modelos v√°rias vezes
            equipamento = get_model_safe('Equipamento')
            pmp = get_model_safe('PMP')
            os_model = get_model_safe('OrdemServico')
            
            if i == 0:
                print(f"‚úÖ Primeira importa√ß√£o: Equipamento={equipamento is not None}, PMP={pmp is not None}, OS={os_model is not None}")
            elif i == 9:
                print(f"‚úÖ D√©cima importa√ß√£o: Equipamento={equipamento is not None}, PMP={pmp is not None}, OS={os_model is not None}")
        
        print("‚úÖ M√∫ltiplas importa√ß√µes funcionando sem conflito!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro em m√∫ltiplas importa√ß√µes: {e}")
        import traceback
        traceback.print_exc()
        return False

def testar_cache_funcionando():
    """Testa se o cache est√° funcionando corretamente"""
    print("\nüíæ Testando cache de modelos...")
    
    try:
        from routes.relatorio_52_semanas import get_model_safe, _MODELS_CACHE
        
        # Limpar cache para teste
        _MODELS_CACHE.clear()
        print("üßπ Cache limpo")
        
        # Primeira importa√ß√£o - deve ir para o cache
        equipamento1 = get_model_safe('Equipamento')
        print(f"üì• Primeira importa√ß√£o Equipamento: {equipamento1 is not None}")
        print(f"üíæ Cache ap√≥s primeira importa√ß√£o: {list(_MODELS_CACHE.keys())}")
        
        # Segunda importa√ß√£o - deve vir do cache
        equipamento2 = get_model_safe('Equipamento')
        print(f"üì§ Segunda importa√ß√£o Equipamento: {equipamento2 is not None}")
        
        # Verificar se s√£o o mesmo objeto (cache funcionando)
        if equipamento1 is equipamento2:
            print("‚úÖ Cache funcionando - mesmo objeto retornado!")
        else:
            print("‚ùå Cache n√£o funcionando - objetos diferentes")
            return False
        
        # Testar com PMP
        pmp1 = get_model_safe('PMP')
        pmp2 = get_model_safe('PMP')
        
        if pmp1 is pmp2:
            print("‚úÖ Cache PMP funcionando!")
        else:
            print("‚ùå Cache PMP n√£o funcionando")
            return False
        
        print(f"üíæ Cache final: {list(_MODELS_CACHE.keys())}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de cache: {e}")
        return False

def testar_fallback_mock():
    """Testa se o fallback para modelo mock funciona"""
    print("\nüé≠ Testando fallback para modelo mock...")
    
    try:
        from routes.relatorio_52_semanas import get_model_safe
        
        # Tentar importar um modelo inexistente
        modelo_inexistente = get_model_safe('ModeloInexistente')
        
        if modelo_inexistente is None:
            print("‚úÖ Fallback funcionando - retorna None para modelo inexistente")
            return True
        else:
            print("‚ùå Fallback n√£o funcionando")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro no teste de fallback: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE DE IMPORTA√á√ÉO SEGURA")
    print("=" * 50)
    
    try:
        # Teste 1: M√∫ltiplas importa√ß√µes
        if not testar_importacao_multipla():
            print("‚ùå Falha no teste de m√∫ltiplas importa√ß√µes")
            return False
        
        # Teste 2: Cache funcionando
        if not testar_cache_funcionando():
            print("‚ùå Falha no teste de cache")
            return False
        
        # Teste 3: Fallback mock
        if not testar_fallback_mock():
            print("‚ùå Falha no teste de fallback")
            return False
        
        print("\n" + "=" * 50)
        print("üéâ TODOS OS TESTES DE IMPORTA√á√ÉO SEGURA PASSARAM!")
        print("üõ°Ô∏è Sistema de importa√ß√£o segura funcionando:")
        print("  ‚úÖ Cache evita reimporta√ß√µes")
        print("  ‚úÖ M√∫ltiplas importa√ß√µes sem conflito")
        print("  ‚úÖ Fallback para modelos inexistentes")
        print("  ‚úÖ Compat√≠vel com produ√ß√£o")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro durante os testes: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
