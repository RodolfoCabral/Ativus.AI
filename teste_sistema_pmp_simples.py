#!/usr/bin/env python3
"""
Script de Teste Simplificado para Sistema de Gera√ß√£o de OS PMP
Testa funcionalidades b√°sicas sem depend√™ncias do Flask app
"""

import sys
import os
from datetime import datetime, date, timedelta

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_basic_imports():
    """Testa importa√ß√µes b√°sicas"""
    print("="*60)
    print("TESTE 1: IMPORTA√á√ïES B√ÅSICAS")
    print("="*60)
    
    try:
        # Testar dateutil
        from dateutil.relativedelta import relativedelta
        print("‚úÖ python-dateutil importado")
        
        # Testar sistema aprimorado
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        print("‚úÖ GeradorOSPMPAprimorado importado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False

def test_gerador_functionality():
    """Testa funcionalidades b√°sicas do gerador"""
    print("\n" + "="*60)
    print("TESTE 2: FUNCIONALIDADES DO GERADOR")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        
        # Criar inst√¢ncia
        gerador = GeradorOSPMPAprimorado()
        print("‚úÖ Inst√¢ncia criada")
        
        # Testar normaliza√ß√£o de frequ√™ncias
        testes_freq = [
            ('semanal', 'semanal'),
            ('MENSAL', 'mensal'),
            ('di√°rio', 'diaria'),
            ('anual', 'anual'),
            ('trimestral', 'trimestral'),
            ('frequencia_inexistente', 'semanal')  # deve retornar padr√£o
        ]
        
        print("\nüìã Teste de normaliza√ß√£o de frequ√™ncias:")
        for entrada, esperado in testes_freq:
            resultado = gerador.normalizar_frequencia(entrada)
            status = "‚úÖ" if resultado == esperado else "‚ùå"
            print(f"  {status} '{entrada}' -> '{resultado}' (esperado: '{esperado}')")
        
        # Testar c√°lculo de pr√≥ximas datas
        print("\nüìÖ Teste de c√°lculo de pr√≥ximas datas:")
        data_base = date(2025, 9, 8)  # 08/09/2025 (domingo)
        
        testes_data = [
            ('semanal', timedelta(weeks=1)),
            ('mensal', None),  # Ser√° testado separadamente
            ('diaria', timedelta(days=1)),
            ('anual', None)    # Ser√° testado separadamente
        ]
        
        for freq, delta_esperado in testes_data:
            proxima = gerador.calcular_proxima_data(data_base, freq)
            
            if delta_esperado:
                esperada = data_base + delta_esperado
                status = "‚úÖ" if proxima == esperada else "‚ùå"
                print(f"  {status} {freq}: {data_base} -> {proxima} (esperado: {esperada})")
            else:
                print(f"  ‚úÖ {freq}: {data_base} -> {proxima}")
        
        # Teste espec√≠fico para mensal
        proxima_mensal = gerador.calcular_proxima_data(data_base, 'mensal')
        esperada_mensal = date(2025, 10, 8)
        status = "‚úÖ" if proxima_mensal == esperada_mensal else "‚ùå"
        print(f"  {status} mensal espec√≠fico: {data_base} -> {proxima_mensal} (esperado: {esperada_mensal})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do gerador: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_cronograma_generation():
    """Testa gera√ß√£o de cronograma sem banco de dados"""
    print("\n" + "="*60)
    print("TESTE 3: GERA√á√ÉO DE CRONOGRAMA")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        
        gerador = GeradorOSPMPAprimorado()
        
        # Criar objeto PMP simulado
        class PMPSimulado:
            def __init__(self, data_inicio, frequencia, data_fim=None):
                self.data_inicio_plano = data_inicio
                self.frequencia = frequencia
                self.data_fim_plano = data_fim
                self.codigo = "PMP-TESTE"
        
        # Teste 1: PMP semanal por 1 m√™s
        print("\nüìÖ Teste 1: PMP semanal por 30 dias")
        pmp_semanal = PMPSimulado(
            data_inicio=date(2025, 9, 8),  # 08/09/2025
            frequencia='semanal'
        )
        
        cronograma = gerador.gerar_cronograma_os(pmp_semanal, limite_futuro_dias=30)
        print(f"  Datas geradas: {len(cronograma)}")
        for i, data in enumerate(cronograma, 1):
            print(f"    {i}. {data}")
        
        # Teste 2: PMP mensal por 6 meses
        print("\nüìÖ Teste 2: PMP mensal por 180 dias")
        pmp_mensal = PMPSimulado(
            data_inicio=date(2025, 9, 1),
            frequencia='mensal'
        )
        
        cronograma_mensal = gerador.gerar_cronograma_os(pmp_mensal, limite_futuro_dias=180)
        print(f"  Datas geradas: {len(cronograma_mensal)}")
        for i, data in enumerate(cronograma_mensal, 1):
            print(f"    {i}. {data}")
        
        # Teste 3: PMP com data fim
        print("\nüìÖ Teste 3: PMP com data fim definida")
        pmp_com_fim = PMPSimulado(
            data_inicio=date(2025, 9, 1),
            frequencia='semanal',
            data_fim=date(2025, 9, 30)
        )
        
        cronograma_limitado = gerador.gerar_cronograma_os(pmp_com_fim)
        print(f"  Datas geradas: {len(cronograma_limitado)}")
        for i, data in enumerate(cronograma_limitado, 1):
            print(f"    {i}. {data}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de cronograma: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_validation_logic():
    """Testa l√≥gica de valida√ß√£o"""
    print("\n" + "="*60)
    print("TESTE 4: L√ìGICA DE VALIDA√á√ÉO")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        
        gerador = GeradorOSPMPAprimorado()
        
        # Criar objetos PMP simulados para teste
        class PMPSimulado:
            def __init__(self, status='ativo', data_inicio=None, data_fim=None, frequencia='semanal'):
                self.status = status
                self.data_inicio_plano = data_inicio
                self.data_fim_plano = data_fim
                self.frequencia = frequencia
                self.codigo = "PMP-TESTE"
        
        hoje = gerador.hoje
        
        # Teste 1: PMP v√°lida
        pmp_valida = PMPSimulado(
            status='ativo',
            data_inicio=hoje - timedelta(days=7),
            frequencia='semanal'
        )
        valida, motivo = gerador.validar_pmp(pmp_valida)
        print(f"  ‚úÖ PMP v√°lida: {valida} - {motivo}")
        
        # Teste 2: PMP inativa
        pmp_inativa = PMPSimulado(status='inativo')
        valida, motivo = gerador.validar_pmp(pmp_inativa)
        print(f"  ‚ùå PMP inativa: {valida} - {motivo}")
        
        # Teste 3: PMP sem data de in√≠cio
        pmp_sem_data = PMPSimulado(data_inicio=None)
        valida, motivo = gerador.validar_pmp(pmp_sem_data)
        print(f"  ‚ùå PMP sem data: {valida} - {motivo}")
        
        # Teste 4: PMP com data de in√≠cio futura
        pmp_futura = PMPSimulado(data_inicio=hoje + timedelta(days=7))
        valida, motivo = gerador.validar_pmp(pmp_futura)
        print(f"  ‚ùå PMP futura: {valida} - {motivo}")
        
        # Teste 5: PMP expirada
        pmp_expirada = PMPSimulado(
            data_inicio=hoje - timedelta(days=30),
            data_fim=hoje - timedelta(days=1)
        )
        valida, motivo = gerador.validar_pmp(pmp_expirada)
        print(f"  ‚ùå PMP expirada: {valida} - {motivo}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de valida√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_api_structure():
    """Testa estrutura da API"""
    print("\n" + "="*60)
    print("TESTE 5: ESTRUTURA DA API")
    print("="*60)
    
    try:
        from routes.pmp_os_api import pmp_os_api_bp
        print("‚úÖ Blueprint da API importado")
        
        # Verificar se √© um Blueprint v√°lido
        from flask import Blueprint
        if isinstance(pmp_os_api_bp, Blueprint):
            print("‚úÖ √â um Blueprint v√°lido do Flask")
        else:
            print("‚ùå N√£o √© um Blueprint v√°lido")
            return False
        
        # Verificar nome do blueprint
        print(f"‚úÖ Nome do blueprint: {pmp_os_api_bp.name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste da API: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_example_scenario():
    """Testa cen√°rio de exemplo espec√≠fico"""
    print("\n" + "="*60)
    print("TESTE 6: CEN√ÅRIO DE EXEMPLO (PMP-03-BBN01)")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        
        gerador = GeradorOSPMPAprimorado()
        
        # Simular PMP-03-BBN01 conforme especifica√ß√£o
        class PMPExemplo:
            def __init__(self):
                self.codigo = "PMP-03-BBN01"
                self.descricao = "Manuten√ß√£o Preventiva BBN01"
                self.status = 'ativo'
                self.data_inicio_plano = date(2025, 9, 8)  # 08/09/2025
                self.data_fim_plano = None
                self.frequencia = 'semanal'
                self.id = 135
        
        pmp_exemplo = PMPExemplo()
        
        # Validar PMP
        valida, motivo = gerador.validar_pmp(pmp_exemplo)
        print(f"‚úÖ Valida√ß√£o: {valida} - {motivo}")
        
        # Gerar cronograma at√© hoje + algumas semanas
        cronograma = gerador.gerar_cronograma_os(pmp_exemplo, limite_futuro_dias=60)
        
        print(f"\nüìÖ Cronograma gerado para {pmp_exemplo.codigo}:")
        print(f"  Data in√≠cio: {pmp_exemplo.data_inicio_plano}")
        print(f"  Frequ√™ncia: {pmp_exemplo.frequencia}")
        print(f"  Total de datas: {len(cronograma)}")
        
        # Mostrar datas esperadas conforme especifica√ß√£o
        datas_esperadas = [
            date(2025, 9, 8),   # 08/09/2025
            date(2025, 9, 15),  # 15/09/2025
            date(2025, 9, 22),  # 22/09/2025
            date(2025, 9, 29),  # 29/09/2025
            date(2025, 10, 6),  # 06/10/2025
        ]
        
        print("\n  Datas esperadas vs geradas:")
        for i, data_esperada in enumerate(datas_esperadas):
            if i < len(cronograma):
                data_gerada = cronograma[i]
                status = "‚úÖ" if data_gerada == data_esperada else "‚ùå"
                print(f"    {status} {i+1}. Esperada: {data_esperada}, Gerada: {data_gerada}")
            else:
                print(f"    ‚ùå {i+1}. Esperada: {data_esperada}, N√£o gerada")
        
        # Verificar se as primeiras 5 datas est√£o corretas
        primeiras_5_corretas = all(
            cronograma[i] == datas_esperadas[i] 
            for i in range(min(5, len(cronograma), len(datas_esperadas)))
        )
        
        if primeiras_5_corretas:
            print("‚úÖ As primeiras 5 datas est√£o corretas conforme especifica√ß√£o!")
        else:
            print("‚ùå Algumas datas n√£o conferem com a especifica√ß√£o")
        
        return primeiras_5_corretas
        
    except Exception as e:
        print(f"‚ùå Erro no teste de cen√°rio: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_simplified_tests():
    """Executa todos os testes simplificados"""
    print("üöÄ TESTES SIMPLIFICADOS DO SISTEMA PMP OS")
    print("Data/Hora:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    testes = [
        ("Importa√ß√µes B√°sicas", test_basic_imports),
        ("Funcionalidades do Gerador", test_gerador_functionality),
        ("Gera√ß√£o de Cronograma", test_cronograma_generation),
        ("L√≥gica de Valida√ß√£o", test_validation_logic),
        ("Estrutura da API", test_api_structure),
        ("Cen√°rio de Exemplo", test_example_scenario)
    ]
    
    resultados = []
    
    for nome, teste_func in testes:
        try:
            resultado = teste_func()
            resultados.append((nome, resultado))
        except Exception as e:
            print(f"‚ùå FALHA CR√çTICA no teste {nome}: {e}")
            resultados.append((nome, False))
    
    # Resumo final
    print("\n" + "="*60)
    print("RESUMO DOS TESTES SIMPLIFICADOS")
    print("="*60)
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{status} - {nome}")
        if resultado:
            sucessos += 1
    
    print(f"\nResultado: {sucessos}/{len(resultados)} testes passaram")
    
    if sucessos == len(resultados):
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de gera√ß√£o autom√°tica de OS baseado em PMPs est√° funcionando corretamente")
        print("‚úÖ L√≥gica de cronograma, valida√ß√£o e frequ√™ncias implementada")
        print("‚úÖ API estruturada e pronta para uso")
        print("‚úÖ Cen√°rio de exemplo (PMP-03-BBN01) validado")
    elif sucessos >= len(resultados) * 0.8:
        print("‚ö†Ô∏è Maioria dos testes passou. Sistema funcional com algumas limita√ß√µes.")
    else:
        print("‚ùå Muitos testes falharam. Sistema precisa de corre√ß√µes.")
    
    return sucessos == len(resultados)

if __name__ == "__main__":
    success = run_simplified_tests()
    sys.exit(0 if success else 1)
