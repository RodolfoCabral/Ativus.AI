#!/usr/bin/env python3
"""
Script para inicializar a tabela de ordens de servi√ßo no banco de dados
"""

import os
import sys
from app import create_app, db
from sqlalchemy import inspect

# Importa√ß√£o segura dos modelos
try:
    from assets_models import OrdemServico
    OS_AVAILABLE = True
except ImportError as e:
    print(f"Erro ao importar modelo OrdemServico: {e}")
    OS_AVAILABLE = False

def init_os_table():
    """Inicializa a tabela de ordens de servi√ßo no banco de dados"""
    
    if not OS_AVAILABLE:
        print("‚ùå Modelo OrdemServico n√£o dispon√≠vel. Verifique o arquivo assets_models.py")
        return False
    
    app = create_app()
    
    with app.app_context():
        try:
            # Usar inspector para verificar se a tabela existe
            inspector = inspect(db.engine)
            table_exists = inspector.has_table('ordens_servico')
            
            if table_exists:
                print("‚ÑπÔ∏è  Tabela 'ordens_servico' j√° existe")
                
                # Verificar se h√° registros
                try:
                    count = OrdemServico.query.count()
                    print(f"üìä Total de ordens de servi√ßo existentes: {count}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel contar registros: {e}")
                
            else:
                print("üî® Criando tabela 'ordens_servico'...")
                
                # Criar tabela
                db.create_all()
                
                print("‚úÖ Tabela 'ordens_servico' criada com sucesso!")
                
                # Verificar se foi criada corretamente
                inspector = inspect(db.engine)
                if inspector.has_table('ordens_servico'):
                    print("‚úÖ Verifica√ß√£o: Tabela criada corretamente")
                else:
                    print("‚ùå Erro: Tabela n√£o foi criada")
                    return False
            
            # Mostrar estrutura da tabela
            print("\nüìã Estrutura da tabela 'ordens_servico':")
            print("   - id (Integer, Primary Key)")
            print("   - chamado_id (Integer, Foreign Key)")
            print("   - descricao (Text)")
            print("   - tipo_manutencao (String)")
            print("   - oficina (String)")
            print("   - condicao_ativo (String)")
            print("   - qtd_pessoas (Integer)")
            print("   - horas (Float)")
            print("   - hh (Float)")
            print("   - prioridade (String)")
            print("   - status (String)")
            print("   - filial_id (Integer, Foreign Key)")
            print("   - setor_id (Integer, Foreign Key)")
            print("   - equipamento_id (Integer, Foreign Key)")
            print("   - empresa (String)")
            print("   - usuario_criacao (String)")
            print("   - usuario_responsavel (String)")
            print("   - data_criacao (DateTime)")
            print("   - data_programada (Date)")
            print("   - data_inicio (DateTime)")
            print("   - data_conclusao (DateTime)")
            print("   - data_atualizacao (DateTime)")
            
            print("\nüéâ Inicializa√ß√£o da tabela de ordens de servi√ßo conclu√≠da!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar tabela de ordens de servi√ßo: {e}")
            import traceback
            traceback.print_exc()
            return False

if __name__ == '__main__':
    print("üöÄ Inicializando tabela de ordens de servi√ßo...")
    print("=" * 50)
    
    success = init_os_table()
    
    print("=" * 50)
    if success:
        print("‚úÖ Script executado com sucesso!")
        sys.exit(0)
    else:
        print("‚ùå Script falhou!")
        sys.exit(1)

