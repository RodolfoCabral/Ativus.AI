#!/usr/bin/env python3
"""
Demonstra√ß√£o da L√≥gica de Gera√ß√£o de OS por Data
Mostra como o sistema gera apenas OS at√© hoje e futuras no dia correto
"""

from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta

def demonstrar_logica_geracao():
    """Demonstra a l√≥gica de gera√ß√£o de OS por data"""
    
    print("üéØ DEMONSTRA√á√ÉO DA L√ìGICA DE GERA√á√ÉO DE OS")
    print("="*70)
    print(f"Data de hoje: {date.today()}")
    print()
    
    # Exemplo com PMP-03-BBN01
    print("üìã EXEMPLO: PMP-03-BBN01")
    print("   Descri√ß√£o: PREVENTIVA SEMANAL - ELETRICA")
    print("   Data in√≠cio: 08/09/2025")
    print("   Frequ√™ncia: semanal")
    print()
    
    # Gerar cronograma completo
    data_inicio = date(2025, 9, 8)
    hoje = date.today()
    
    print("üìÖ CRONOGRAMA COMPLETO (pr√≥ximas 8 semanas):")
    cronograma_completo = []
    data_atual = data_inicio
    
    for i in range(8):
        cronograma_completo.append(data_atual)
        data_atual = data_atual + timedelta(weeks=1)
    
    for i, data in enumerate(cronograma_completo, 1):
        status_data = "PASSADA" if data < hoje else ("HOJE" if data == hoje else "FUTURA")
        print(f"   {i}. {data} ({data.strftime('%A')}) - {status_data}")
    
    print()
    print("ü§ñ L√ìGICA DO SISTEMA AUTOM√ÅTICO:")
    print()
    
    # Separar datas
    datas_passadas = [d for d in cronograma_completo if d < hoje]
    data_hoje = [d for d in cronograma_completo if d == hoje]
    datas_futuras = [d for d in cronograma_completo if d > hoje]
    
    print(f"üìä AN√ÅLISE DAS DATAS:")
    print(f"   ‚Ä¢ Datas passadas: {len(datas_passadas)}")
    print(f"   ‚Ä¢ Data de hoje: {len(data_hoje)}")
    print(f"   ‚Ä¢ Datas futuras: {len(datas_futuras)}")
    print()
    
    print("‚úÖ COMPORTAMENTO DO SISTEMA:")
    print()
    
    print("1Ô∏è‚É£ NO DEPLOY INICIAL:")
    print("   O sistema gera IMEDIATAMENTE as OS das datas passadas:")
    for i, data in enumerate(datas_passadas, 1):
        print(f"      ‚úÖ OS #{i:03d} para {data} - CRIADA IMEDIATAMENTE")
    
    if data_hoje:
        print(f"      ‚úÖ OS #{len(datas_passadas)+1:03d} para {data_hoje[0]} - CRIADA IMEDIATAMENTE (√© hoje)")
    
    print()
    print("2Ô∏è‚É£ PARA DATAS FUTURAS:")
    print("   O sistema aguarda o dia correto para gerar:")
    for i, data in enumerate(datas_futuras, 1):
        dias_restantes = (data - hoje).days
        print(f"      ‚è≥ OS #{len(datas_passadas)+len(data_hoje)+i:03d} para {data} - ser√° criada em {dias_restantes} dias")
    
    print()
    print("üîÑ EXECU√á√ÉO DI√ÅRIA DO SISTEMA:")
    print("   ‚Ä¢ 06:00 - Verifica se h√° novas OS para criar hoje")
    print("   ‚Ä¢ 18:00 - Segunda verifica√ß√£o di√°ria")
    print("   ‚Ä¢ A cada 30min - Verifica√ß√£o de emerg√™ncia")
    print()
    
    print("üìù C√ìDIGO RESPONS√ÅVEL:")
    print("   Linha 396-398 em sistema_geracao_os_pmp_aprimorado.py:")
    print("   ```python")
    print("   # S√≥ processar datas at√© hoje (n√£o gerar OS futuras automaticamente)")
    print("   if data_programada > self.hoje:")
    print("       continue")
    print("   ```")
    print()
    
    print("üéØ RESULTADO PR√ÅTICO:")
    print()
    print("   ANTES DO DEPLOY:")
    print("   ‚Ä¢ 0 OS existem para PMP-03-BBN01")
    print()
    print("   IMEDIATAMENTE AP√ìS DEPLOY:")
    datas_imediatas = [d for d in cronograma_completo if d <= hoje]
    print(f"   ‚Ä¢ {len(datas_imediatas)} OS criadas automaticamente:")
    for i, data in enumerate(datas_imediatas, 1):
        print(f"     - OS #{i:03d}: {data}")
    print()
    print("   NOS PR√ìXIMOS DIAS:")
    for data in datas_futuras[:3]:  # Mostrar pr√≥ximas 3
        print(f"   ‚Ä¢ {data}: Nova OS ser√° criada automaticamente √†s 06:00")
    
    return len(datas_imediatas), len(datas_futuras)

def demonstrar_outras_pmps():
    """Demonstra a l√≥gica para outras PMPs"""
    
    print("\n" + "="*70)
    print("üìã OUTRAS PMPs - COMPORTAMENTO SIMILAR")
    print("="*70)
    
    pmps_exemplo = [
        {
            'codigo': 'PMP-01-BBN01',
            'frequencia': 'mensal',
            'data_inicio': date(2025, 9, 4),
            'descricao': 'PREVENTIVA MENSAL - MECANICA'
        },
        {
            'codigo': 'PMP-02-BBN01', 
            'frequencia': 'semanal',
            'data_inicio': date(2025, 9, 5),
            'descricao': 'PREVENTIVA SEMANAL - MECANICA'
        }
    ]
    
    hoje = date.today()
    
    for pmp in pmps_exemplo:
        print(f"\nüìã {pmp['codigo']}: {pmp['descricao']}")
        print(f"   Data in√≠cio: {pmp['data_inicio']}")
        print(f"   Frequ√™ncia: {pmp['frequencia']}")
        
        # Calcular datas at√© hoje
        datas = []
        data_atual = pmp['data_inicio']
        
        while data_atual <= hoje:
            datas.append(data_atual)
            if pmp['frequencia'] == 'semanal':
                data_atual = data_atual + timedelta(weeks=1)
            elif pmp['frequencia'] == 'mensal':
                data_atual = data_atual + relativedelta(months=1)
        
        print(f"   üìÖ OS criadas no deploy: {len(datas)}")
        for i, data in enumerate(datas, 1):
            print(f"      {i}. {data}")
        
        # Pr√≥xima data
        if pmp['frequencia'] == 'semanal':
            proxima = datas[-1] + timedelta(weeks=1) if datas else pmp['data_inicio']
        elif pmp['frequencia'] == 'mensal':
            proxima = datas[-1] + relativedelta(months=1) if datas else pmp['data_inicio']
        
        if proxima > hoje:
            dias_restantes = (proxima - hoje).days
            print(f"   ‚è≥ Pr√≥xima OS: {proxima} (em {dias_restantes} dias)")

if __name__ == "__main__":
    print("üîç DEMONSTRA√á√ÉO DA L√ìGICA DE GERA√á√ÉO DE OS POR DATA")
    print(f"Executado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Demonstrar l√≥gica principal
    imediatas, futuras = demonstrar_logica_geracao()
    
    # Demonstrar outras PMPs
    demonstrar_outras_pmps()
    
    print("\n" + "="*70)
    print("üí° RESUMO DA L√ìGICA:")
    print("="*70)
    print("‚úÖ CORRETO: Datas passadas s√£o criadas IMEDIATAMENTE no deploy")
    print("‚úÖ CORRETO: Datas futuras s√£o criadas APENAS no dia correto")
    print("‚úÖ CORRETO: Sistema executa automaticamente todos os dias")
    print("‚úÖ CORRETO: N√£o h√° gera√ß√£o antecipada de OS futuras")
    print()
    print("üéØ COMPORTAMENTO EXATO CONFORME SOLICITADO:")
    print("   ‚Ä¢ Deploy ‚Üí OS passadas aparecem de imediato")
    print("   ‚Ä¢ Futuras ‚Üí S√≥ aparecem no dia correto")
    print("   ‚Ä¢ Autom√°tico ‚Üí Sem interven√ß√£o manual")
    print("="*70)
