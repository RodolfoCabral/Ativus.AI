#!/usr/bin/env python3
"""
Script para criar tabelas do Plano Mestre no banco de dados do Heroku
Execute este script no console do Heroku para criar as tabelas necess√°rias
"""

import os
import sys

def criar_tabelas_plano_mestre():
    """Criar todas as tabelas necess√°rias para o Plano Mestre"""
    
    print("üîß Iniciando cria√ß√£o das tabelas do Plano Mestre...")
    
    try:
        # Importar aplica√ß√£o e modelos
        from app import create_app
        from models import db
        
        # Importar modelos espec√≠ficos do plano mestre
        from models.plano_mestre import PlanoMestre, AtividadePlanoMestre, HistoricoExecucaoPlano
        
        print("‚úÖ Modelos importados com sucesso")
        
        # Criar aplica√ß√£o Flask
        app = create_app()
        print("‚úÖ Aplica√ß√£o Flask criada")
        
        # Criar contexto da aplica√ß√£o
        with app.app_context():
            print("üóÑÔ∏è Criando tabelas no banco de dados...")
            
            # Criar todas as tabelas
            db.create_all()
            
            print("‚úÖ Comando db.create_all() executado")
            
            # Verificar se as tabelas foram criadas
            inspector = db.inspect(db.engine)
            tabelas_existentes = inspector.get_table_names()
            
            print("\nüìã Tabelas existentes no banco de dados:")
            for tabela in sorted(tabelas_existentes):
                print(f"  ‚úì {tabela}")
            
            # Verificar tabelas espec√≠ficas do plano mestre
            tabelas_plano_mestre = [
                'planos_mestre',
                'atividades_plano_mestre', 
                'historico_execucao_plano'
            ]
            
            print("\nüîç Verificando tabelas do Plano Mestre:")
            tabelas_criadas = []
            for tabela in tabelas_plano_mestre:
                if tabela in tabelas_existentes:
                    print(f"  ‚úÖ {tabela} - CRIADA")
                    tabelas_criadas.append(tabela)
                else:
                    print(f"  ‚ùå {tabela} - N√ÉO ENCONTRADA")
            
            if len(tabelas_criadas) == len(tabelas_plano_mestre):
                print("\nüéâ SUCESSO! Todas as tabelas do Plano Mestre foram criadas!")
                
                # Testar inser√ß√£o b√°sica
                print("\nüß™ Testando inser√ß√£o de dados...")
                
                # Criar um plano mestre de teste
                plano_teste = PlanoMestre(
                    equipamento_id=999999,  # ID de teste
                    nome="Plano Teste - Cria√ß√£o de Tabelas",
                    descricao="Plano criado para testar a estrutura do banco",
                    criado_por=1
                )
                
                db.session.add(plano_teste)
                db.session.commit()
                
                print("‚úÖ Inser√ß√£o de teste realizada com sucesso")
                
                # Remover dados de teste
                db.session.delete(plano_teste)
                db.session.commit()
                
                print("‚úÖ Dados de teste removidos")
                print("\nüéØ BANCO DE DADOS PRONTO PARA USO!")
                
            else:
                print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Apenas {len(tabelas_criadas)} de {len(tabelas_plano_mestre)} tabelas foram criadas")
                print("Verifique se h√° erros nos modelos ou no banco de dados")
                
    except ImportError as e:
        print(f"‚ùå ERRO DE IMPORTA√á√ÉO: {e}")
        print("Verifique se todos os arquivos foram enviados para o Heroku:")
        print("  - models/plano_mestre.py")
        print("  - routes/plano_mestre.py") 
        print("  - app.py (atualizado)")
        
    except Exception as e:
        print(f"‚ùå ERRO GERAL: {e}")
        print("Detalhes do erro:")
        import traceback
        traceback.print_exc()
        
    print("\n" + "="*50)
    print("Script de cria√ß√£o de tabelas finalizado")
    print("="*50)

if __name__ == "__main__":
    criar_tabelas_plano_mestre()

