#!/usr/bin/env python3
"""
Script de Teste para Sistema de Gera√ß√£o Autom√°tica de OS baseado em PMPs
Valida todas as funcionalidades implementadas
"""

import sys
import os
import traceback
from datetime import datetime, date, timedelta

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todas as importa√ß√µes necess√°rias funcionam"""
    print("="*60)
    print("TESTE 1: IMPORTA√á√ïES")
    print("="*60)
    
    try:
        # Testar importa√ß√£o do sistema aprimorado
        from sistema_geracao_os_pmp_aprimorado import (
            GeradorOSPMPAprimorado,
            gerar_todas_os_pmp,
            gerar_os_pmp_codigo,
            verificar_pendencias_os_pmp
        )
        print("‚úÖ Sistema aprimorado importado com sucesso")
        
        # Testar importa√ß√£o das rotas
        from routes.pmp_os_api import pmp_os_api_bp
        print("‚úÖ Blueprint de API importado com sucesso")
        
        # Testar importa√ß√£o dos modelos
        from models.pmp_limpo import PMP, AtividadePMP
        print("‚úÖ Modelos PMP importados com sucesso")
        
        from assets_models import OrdemServico, AtividadeOS
        print("‚úÖ Modelos de OS importados com sucesso")
        
        # Testar dateutil
        from dateutil.relativedelta import relativedelta
        print("‚úÖ python-dateutil importado com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        traceback.print_exc()
        return False

def test_gerador_class():
    """Testa a classe GeradorOSPMPAprimorado"""
    print("\n" + "="*60)
    print("TESTE 2: CLASSE GERADOR")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        
        # Criar inst√¢ncia
        gerador = GeradorOSPMPAprimorado()
        print("‚úÖ Inst√¢ncia do gerador criada com sucesso")
        
        # Testar normaliza√ß√£o de frequ√™ncia
        frequencias_teste = [
            'semanal', 'SEMANAL', 'Semanal',
            'mensal', 'm√™s', 'monthly',
            'diaria', 'di√°rio', 'daily',
            'anual', 'yearly', 'ano'
        ]
        
        for freq in frequencias_teste:
            normalizada = gerador.normalizar_frequencia(freq)
            print(f"  {freq} -> {normalizada}")
        
        print("‚úÖ Normaliza√ß√£o de frequ√™ncias funcionando")
        
        # Testar c√°lculo de pr√≥xima data
        data_base = date(2025, 9, 8)  # 08/09/2025
        
        proxima_semanal = gerador.calcular_proxima_data(data_base, 'semanal')
        print(f"  Pr√≥xima data semanal: {data_base} -> {proxima_semanal}")
        
        proxima_mensal = gerador.calcular_proxima_data(data_base, 'mensal')
        print(f"  Pr√≥xima data mensal: {data_base} -> {proxima_mensal}")
        
        print("‚úÖ C√°lculo de pr√≥ximas datas funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste da classe: {e}")
        traceback.print_exc()
        return False

def test_database_connection():
    """Testa conex√£o com banco de dados"""
    print("\n" + "="*60)
    print("TESTE 3: CONEX√ÉO COM BANCO")
    print("="*60)
    
    try:
        from models import db
        from models.pmp_limpo import PMP
        from assets_models import OrdemServico
        
        # Testar consulta de PMPs
        pmps_count = PMP.query.count()
        print(f"‚úÖ Total de PMPs no banco: {pmps_count}")
        
        # Testar consulta de OS
        os_count = OrdemServico.query.count()
        print(f"‚úÖ Total de OS no banco: {os_count}")
        
        # Buscar PMPs ativas
        pmps_ativas = PMP.query.filter_by(status='ativo').count()
        print(f"‚úÖ PMPs ativas: {pmps_ativas}")
        
        # Buscar PMPs com data de in√≠cio
        pmps_com_data = PMP.query.filter(
            PMP.status == 'ativo',
            PMP.data_inicio_plano.isnot(None)
        ).count()
        print(f"‚úÖ PMPs ativas com data de in√≠cio: {pmps_com_data}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com banco: {e}")
        traceback.print_exc()
        return False

def test_pmp_validation():
    """Testa valida√ß√£o de PMPs"""
    print("\n" + "="*60)
    print("TESTE 4: VALIDA√á√ÉO DE PMPs")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        from models.pmp_limpo import PMP
        
        gerador = GeradorOSPMPAprimorado()
        
        # Buscar algumas PMPs para testar
        pmps = PMP.query.limit(5).all()
        
        if not pmps:
            print("‚ö†Ô∏è Nenhuma PMP encontrada no banco para teste")
            return True
        
        for pmp in pmps:
            valida, motivo = gerador.validar_pmp(pmp)
            status_icon = "‚úÖ" if valida else "‚ùå"
            print(f"  {status_icon} PMP {pmp.codigo}: {motivo}")
        
        print("‚úÖ Valida√ß√£o de PMPs funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o de PMPs: {e}")
        traceback.print_exc()
        return False

def test_pendencias_check():
    """Testa verifica√ß√£o de pend√™ncias"""
    print("\n" + "="*60)
    print("TESTE 5: VERIFICA√á√ÉO DE PEND√äNCIAS")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import verificar_pendencias_os_pmp
        
        resultado = verificar_pendencias_os_pmp()
        
        if resultado['success']:
            print(f"‚úÖ Verifica√ß√£o de pend√™ncias executada com sucesso")
            print(f"  PMPs verificadas: {resultado['total_pmps_verificadas']}")
            print(f"  PMPs com pend√™ncias: {resultado['total_pmps_com_pendencias']}")
            
            if resultado['pendencias']:
                print("  Pend√™ncias encontradas:")
                for pmp in resultado['pendencias'][:3]:  # Mostrar apenas 3
                    print(f"    - {pmp['pmp_codigo']}: {pmp['os_pendentes']} OS pendentes")
            else:
                print("  ‚úÖ Nenhuma pend√™ncia encontrada")
        else:
            print(f"‚ùå Erro na verifica√ß√£o: {resultado['error']}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de pend√™ncias: {e}")
        traceback.print_exc()
        return False

def test_specific_pmp():
    """Testa gera√ß√£o para PMP espec√≠fica"""
    print("\n" + "="*60)
    print("TESTE 6: GERA√á√ÉO PARA PMP ESPEC√çFICA")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import gerar_os_pmp_codigo
        from models.pmp_limpo import PMP
        
        # Buscar uma PMP ativa para teste
        pmp_teste = PMP.query.filter(
            PMP.status == 'ativo',
            PMP.data_inicio_plano.isnot(None)
        ).first()
        
        if not pmp_teste:
            print("‚ö†Ô∏è Nenhuma PMP ativa com data de in√≠cio encontrada para teste")
            return True
        
        print(f"üéØ Testando com PMP: {pmp_teste.codigo}")
        
        # Executar gera√ß√£o (modo simula√ß√£o - n√£o commitando)
        resultado = gerar_os_pmp_codigo(pmp_teste.codigo)
        
        if resultado['success']:
            print(f"‚úÖ Gera√ß√£o para PMP espec√≠fica executada")
            resultado_pmp = resultado['resultado_pmp']
            print(f"  PMP processada: {resultado_pmp['processada']}")
            if resultado_pmp['processada']:
                print(f"  OS geradas: {resultado_pmp['os_geradas']}")
            else:
                print(f"  Motivo: {resultado_pmp['motivo']}")
        else:
            print(f"‚ùå Erro na gera√ß√£o: {resultado['error']}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de PMP espec√≠fica: {e}")
        traceback.print_exc()
        return False

def test_api_endpoints():
    """Testa se os endpoints de API est√£o definidos corretamente"""
    print("\n" + "="*60)
    print("TESTE 7: ENDPOINTS DE API")
    print("="*60)
    
    try:
        from routes.pmp_os_api import pmp_os_api_bp
        
        # Verificar se blueprint tem as rotas esperadas
        endpoints_esperados = [
            '/api/pmp/os/verificar-pendencias',
            '/api/pmp/os/gerar-todas',
            '/api/pmp/os/status-sistema',
            '/api/pmp/os/simular-geracao',
            '/api/pmp/os/executar-automatico'
        ]
        
        # Obter regras do blueprint
        regras = []
        for rule in pmp_os_api_bp.url_map.iter_rules():
            regras.append(rule.rule)
        
        print(f"‚úÖ Blueprint carregado com {len(regras)} rotas")
        
        for endpoint in endpoints_esperados:
            if any(endpoint in regra for regra in regras):
                print(f"  ‚úÖ {endpoint}")
            else:
                print(f"  ‚ùå {endpoint} - N√ÉO ENCONTRADO")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de endpoints: {e}")
        traceback.print_exc()
        return False

def test_cronograma_generation():
    """Testa gera√ß√£o de cronograma"""
    print("\n" + "="*60)
    print("TESTE 8: GERA√á√ÉO DE CRONOGRAMA")
    print("="*60)
    
    try:
        from sistema_geracao_os_pmp_aprimorado import GeradorOSPMPAprimorado
        from models.pmp_limpo import PMP
        
        gerador = GeradorOSPMPAprimorado()
        
        # Buscar PMP para teste
        pmp_teste = PMP.query.filter(
            PMP.status == 'ativo',
            PMP.data_inicio_plano.isnot(None)
        ).first()
        
        if not pmp_teste:
            print("‚ö†Ô∏è Nenhuma PMP encontrada para teste de cronograma")
            return True
        
        print(f"üìÖ Testando cronograma para PMP: {pmp_teste.codigo}")
        print(f"  Data in√≠cio: {pmp_teste.data_inicio_plano}")
        print(f"  Frequ√™ncia: {pmp_teste.frequencia}")
        
        # Gerar cronograma limitado
        cronograma = gerador.gerar_cronograma_os(pmp_teste, limite_futuro_dias=30)
        
        print(f"‚úÖ Cronograma gerado com {len(cronograma)} datas")
        
        # Mostrar primeiras 5 datas
        for i, data in enumerate(cronograma[:5], 1):
            print(f"  {i}. {data}")
        
        if len(cronograma) > 5:
            print(f"  ... e mais {len(cronograma) - 5} datas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de cronograma: {e}")
        traceback.print_exc()
        return False

def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DO SISTEMA DE GERA√á√ÉO DE OS PMP")
    print("Data/Hora:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    testes = [
        ("Importa√ß√µes", test_imports),
        ("Classe Gerador", test_gerador_class),
        ("Conex√£o Banco", test_database_connection),
        ("Valida√ß√£o PMPs", test_pmp_validation),
        ("Verifica√ß√£o Pend√™ncias", test_pendencias_check),
        ("PMP Espec√≠fica", test_specific_pmp),
        ("Endpoints API", test_api_endpoints),
        ("Gera√ß√£o Cronograma", test_cronograma_generation)
    ]
    
    resultados = []
    
    for nome, teste_func in testes:
        try:
            resultado = teste_func()
            resultados.append((nome, resultado))
        except Exception as e:
            print(f"‚ùå FALHA CR√çTICA no teste {nome}: {e}")
            resultados.append((nome, False))
    
    # Resumo final
    print("\n" + "="*60)
    print("RESUMO DOS TESTES")
    print("="*60)
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{status} - {nome}")
        if resultado:
            sucessos += 1
    
    print(f"\nResultado: {sucessos}/{len(resultados)} testes passaram")
    
    if sucessos == len(resultados):
        print("üéâ TODOS OS TESTES PASSARAM! Sistema pronto para uso.")
    elif sucessos >= len(resultados) * 0.8:
        print("‚ö†Ô∏è Maioria dos testes passou. Sistema funcional com algumas limita√ß√µes.")
    else:
        print("‚ùå Muitos testes falharam. Sistema precisa de corre√ß√µes.")
    
    return sucessos == len(resultados)

if __name__ == "__main__":
    # Configurar ambiente Flask m√≠nimo para testes
    try:
        from app import create_app
        app = create_app()
        
        with app.app_context():
            success = run_all_tests()
            sys.exit(0 if success else 1)
            
    except Exception as e:
        print(f"‚ùå Erro ao configurar ambiente de teste: {e}")
        traceback.print_exc()
        sys.exit(1)
