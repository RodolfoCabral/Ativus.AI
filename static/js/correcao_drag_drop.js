/**
 * CORRECAO_DRAG_DROP.JS
 * 
 * Este script corrige o problema de drag and drop ap√≥s desprograma√ß√£o
 * Ele reinicializa os eventos de drag and drop para todas as OS ap√≥s desprograma√ß√£o
 */

console.log('üîß Carregando corre√ß√£o para drag and drop...');

// Fun√ß√£o para reinicializar os eventos de drag and drop
function reinicializarDragDrop() {
    console.log('üîÑ Reinicializando eventos de drag and drop...');
    
    // Remover todos os eventos de drag and drop existentes
    const chamadoCards = document.querySelectorAll('.chamado-card');
    chamadoCards.forEach(card => {
        card.removeEventListener('dragstart', window.handleDragStart);
        card.removeEventListener('dragend', window.handleDragEnd);
        
        // Adicionar novamente os eventos
        card.addEventListener('dragstart', window.handleDragStart);
        card.addEventListener('dragend', window.handleDragEnd);
        card.setAttribute('draggable', 'true');
        
        console.log(`‚úÖ Eventos reinicializados para OS #${card.getAttribute('data-os-id')}`);
    });
    
    // Reinicializar eventos de drop nas c√©lulas do calend√°rio
    const diaCells = document.querySelectorAll('.dia-container');
    diaCells.forEach(cell => {
        cell.removeEventListener('dragover', window.handleDragOver);
        cell.removeEventListener('dragleave', window.handleDragLeave);
        cell.removeEventListener('drop', window.handleDrop);
        
        // Adicionar novamente os eventos
        cell.addEventListener('dragover', window.handleDragOver);
        cell.addEventListener('dragleave', window.handleDragLeave);
        cell.addEventListener('drop', window.handleDrop);
        
        console.log(`‚úÖ Eventos de drop reinicializados para c√©lula ${cell.getAttribute('data-date')}`);
    });
}

// Sobrescrever a fun√ß√£o desprogramarOS para reinicializar os eventos ap√≥s desprograma√ß√£o
if (typeof window.desprogramarOS === 'function') {
    console.log('‚úÖ Fun√ß√£o desprogramarOS encontrada, aplicando corre√ß√£o...');
    
    // Salvar a fun√ß√£o original
    window.desprogramarOS_original = window.desprogramarOS;
    
    // Sobrescrever a fun√ß√£o
    window.desprogramarOS = function(osId) {
        console.log(`üîß Fun√ß√£o desprogramarOS corrigida executada para OS #${osId}`);
        
        // Chamar a fun√ß√£o original
        const result = window.desprogramarOS_original(osId);
        
        // Ap√≥s desprograma√ß√£o, reinicializar os eventos de drag and drop
        setTimeout(function() {
            console.log('üîÑ Desprograma√ß√£o conclu√≠da, reinicializando eventos...');
            reinicializarDragDrop();
            
            // For√ßar a recria√ß√£o dos cards de OS
            setTimeout(function() {
                console.log('üîÑ For√ßando renderiza√ß√£o das linhas de prioridade...');
                if (typeof window.renderPriorityLines === 'function') {
                    window.renderPriorityLines();
                }
            }, 500);
        }, 1000);
        
        return result;
    };
}

// Corrigir a fun√ß√£o handleDrop para garantir que os par√¢metros estejam na ordem correta
if (typeof window.handleDrop === 'function') {
    console.log('‚úÖ Fun√ß√£o handleDrop encontrada, aplicando corre√ß√£o...');
    
    // Salvar a fun√ß√£o original
    window.handleDrop_original = window.handleDrop;
    
    // Sobrescrever a fun√ß√£o
    window.handleDrop = function(e) {
        console.log('üîß Fun√ß√£o handleDrop corrigida executada');
        
        e.stopPropagation();
        e.preventDefault();
        
        // Remover classe de hover
        this.classList.remove('drag-over');
        
        // Verificar se temos um elemento arrastado
        if (!window.draggedElement) {
            console.error('‚ùå Elemento arrastado n√£o encontrado');
            return false;
        }
        
        // Obter ID da OS do elemento arrastado
        const osId = window.draggedElement.getAttribute('data-os-id');
        if (!osId) {
            console.error('‚ùå ID da OS n√£o encontrado no elemento arrastado');
            return false;
        }
        
        // Obter data do elemento de destino
        const dateStr = this.getAttribute('data-date');
        if (!dateStr) {
            console.error('‚ùå Data n√£o encontrada no elemento de destino');
            return false;
        }
        
        // Obter ID do usu√°rio do elemento de destino
        const userId = this.getAttribute('data-user-id');
        if (!userId) {
            console.error('‚ùå ID do usu√°rio n√£o encontrado no elemento de destino');
            return false;
        }
        
        // Obter nome do usu√°rio do elemento de destino ou da linha do usu√°rio
        let userName = this.getAttribute('data-user-name');
        if (!userName) {
            // Tentar obter o nome do usu√°rio da linha do usu√°rio
            const usuarioRow = document.querySelector(`.usuario-row[data-user-id="${userId}"]`);
            if (usuarioRow) {
                const nomeElement = usuarioRow.querySelector('.usuario-nome');
                if (nomeElement) {
                    userName = nomeElement.textContent.trim();
                }
            }
        }
        
        console.log(`üîÑ Drop detectado: OS #${osId} para ${dateStr} com usu√°rio ID ${userId}${userName ? ', nome: ' + userName : ''}`);
        
        // Programar OS diretamente com o nome do usu√°rio
        if (userName) {
            // Chamar diretamente programarOSComNomeUsuario para evitar a fun√ß√£o problem√°tica programarOS
            if (typeof window.programarOSComNomeUsuario === 'function') {
                window.programarOSComNomeUsuario(osId, dateStr, userName);
            } else {
                console.error('‚ùå Fun√ß√£o programarOSComNomeUsuario n√£o encontrada');
            }
        } else {
            // Tentar obter o nome do usu√°rio da lista global
            if (typeof window.usuarios !== 'undefined' && Array.isArray(window.usuarios)) {
                const usuario = window.usuarios.find(u => u.id == userId);
                if (usuario && usuario.name) {
                    if (typeof window.programarOSComNomeUsuario === 'function') {
                        window.programarOSComNomeUsuario(osId, dateStr, usuario.name);
                    }
                } else {
                    console.warn(`‚ö†Ô∏è Nome do usu√°rio n√£o encontrado para ID ${userId}, usando valor padr√£o`);
                    if (typeof window.programarOSComNomeUsuario === 'function') {
                        window.programarOSComNomeUsuario(osId, dateStr, `T√©cnico #${userId}`);
                    }
                }
            } else {
                console.error('‚ùå Lista de usu√°rios n√£o encontrada');
                // √öltimo recurso: chamar a fun√ß√£o original
                return window.handleDrop_original.call(this, e);
            }
        }
        
        return false;
    };
}

// Fun√ß√£o para adicionar atributos data-user-name a todos os elementos de usu√°rio
function adicionarAtributosUsuario() {
    console.log('üîß Adicionando atributos de usu√°rio...');
    
    // Encontrar todos os elementos de usu√°rio
    const usuarioRows = document.querySelectorAll('.usuario-row');
    usuarioRows.forEach(function(row) {
        // Verificar se j√° tem o atributo data-user-name
        if (!row.hasAttribute('data-user-name')) {
            // Obter nome do usu√°rio
            const nomeElement = row.querySelector('.usuario-nome');
            if (nomeElement) {
                const nome = nomeElement.textContent.trim();
                row.setAttribute('data-user-name', nome);
                console.log(`‚úÖ Atributo data-user-name adicionado: ${nome}`);
            }
        }
        
        // Adicionar atributo data-user-name aos dias da semana
        const userId = row.getAttribute('data-user-id');
        if (userId) {
            const diasContainer = document.querySelectorAll(`.dia-container[data-user-id="${userId}"]`);
            diasContainer.forEach(function(dia) {
                if (!dia.hasAttribute('data-user-name')) {
                    const nome = row.getAttribute('data-user-name');
                    if (nome) {
                        dia.setAttribute('data-user-name', nome);
                        console.log(`‚úÖ Atributo data-user-name adicionado ao dia: ${nome}`);
                    }
                }
            });
        }
    });
}

// Fun√ß√£o para corrigir a cria√ß√£o de cards de OS
function corrigirCreateOSCard() {
    if (typeof window.createOSCard === 'function') {
        console.log('‚úÖ Fun√ß√£o createOSCard encontrada, aplicando corre√ß√£o...');
        
        // Salvar a fun√ß√£o original
        window.createOSCard_original = window.createOSCard;
        
        // Sobrescrever a fun√ß√£o
        window.createOSCard = function(os) {
            console.log(`üîß Fun√ß√£o createOSCard corrigida executada para OS #${os.id}`);
            
            // Chamar a fun√ß√£o original
            const card = window.createOSCard_original(os);
            
            // Garantir que o card seja arrast√°vel
            card.setAttribute('draggable', 'true');
            
            // Adicionar eventos de drag and drop
            card.addEventListener('dragstart', window.handleDragStart);
            card.addEventListener('dragend', window.handleDragEnd);
            
            console.log(`‚úÖ Eventos de drag and drop adicionados para OS #${os.id}`);
            
            return card;
        };
    }
}

// Fun√ß√£o para corrigir a renderiza√ß√£o das linhas de prioridade
function corrigirRenderPriorityLines() {
    if (typeof window.renderPriorityLines === 'function') {
        console.log('‚úÖ Fun√ß√£o renderPriorityLines encontrada, aplicando corre√ß√£o...');
        
        // Salvar a fun√ß√£o original
        window.renderPriorityLines_original = window.renderPriorityLines;
        
        // Sobrescrever a fun√ß√£o
        window.renderPriorityLines = function() {
            console.log('üîß Fun√ß√£o renderPriorityLines corrigida executada');
            
            // Chamar a fun√ß√£o original
            const result = window.renderPriorityLines_original();
            
            // Ap√≥s renderiza√ß√£o, reinicializar os eventos de drag and drop
            setTimeout(reinicializarDragDrop, 100);
            
            return result;
        };
    }
}

// Fun√ß√£o para corrigir a fun√ß√£o loadOrdensServico
function corrigirLoadOrdensServico() {
    if (typeof window.loadOrdensServico === 'function') {
        console.log('‚úÖ Fun√ß√£o loadOrdensServico encontrada, aplicando corre√ß√£o...');
        
        // Salvar a fun√ß√£o original
        window.loadOrdensServico_original = window.loadOrdensServico;
        
        // Sobrescrever a fun√ß√£o
        window.loadOrdensServico = function() {
            console.log('üîß Fun√ß√£o loadOrdensServico corrigida executada');
            
            // Chamar a fun√ß√£o original
            const result = window.loadOrdensServico_original();
            
            // Ap√≥s carregamento, reinicializar os eventos de drag and drop
            setTimeout(reinicializarDragDrop, 1000);
            
            return result;
        };
    }
}

// Aplicar corre√ß√µes quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß DOM carregado, aplicando corre√ß√µes...');
    
    // Adicionar atributos de usu√°rio
    setTimeout(adicionarAtributosUsuario, 500);
    
    // Corrigir fun√ß√µes
    setTimeout(function() {
        corrigirCreateOSCard();
        corrigirRenderPriorityLines();
        corrigirLoadOrdensServico();
        
        // Reinicializar eventos de drag and drop
        setTimeout(reinicializarDragDrop, 1000);
    }, 500);
});

// Aplicar corre√ß√µes imediatamente se o DOM j√° estiver carregado
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log('üîß DOM j√° carregado, aplicando corre√ß√µes imediatamente...');
    
    // Adicionar atributos de usu√°rio
    setTimeout(adicionarAtributosUsuario, 500);
    
    // Corrigir fun√ß√µes
    setTimeout(function() {
        corrigirCreateOSCard();
        corrigirRenderPriorityLines();
        corrigirLoadOrdensServico();
        
        // Reinicializar eventos de drag and drop
        setTimeout(reinicializarDragDrop, 1000);
    }, 500);
}

// Configurar um observador para adicionar atributos a novos elementos
const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Verificar se novos elementos foram adicionados
            setTimeout(function() {
                adicionarAtributosUsuario();
                reinicializarDragDrop();
            }, 100);
        }
    });
});

// Configurar observador para todo o documento
observer.observe(document.body, {
    childList: true,
    subtree: true
});

console.log('‚úÖ Corre√ß√£o para drag and drop carregada com sucesso!');

