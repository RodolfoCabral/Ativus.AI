/**
 * SOLUCAO_RADICAL.JS
 * 
 * Esta √© uma solu√ß√£o radical que substitui completamente o sistema de drag and drop
 * para garantir que funcione em todas as situa√ß√µes, incluindo ap√≥s desprograma√ß√£o.
 */

console.log('üîß Carregando solu√ß√£o radical para drag and drop...');

// Fun√ß√£o para inicializar o sistema de drag and drop do zero
function inicializarDragDropRadical() {
    console.log('üîÑ Inicializando sistema de drag and drop radical...');
    
    // Remover todos os eventos de drag and drop existentes
    document.querySelectorAll('.chamado-card').forEach(card => {
        card.removeAttribute('draggable');
        
        // Remover todos os event listeners
        const newCard = card.cloneNode(true);
        card.parentNode.replaceChild(newCard, card);
    });
    
    document.querySelectorAll('.dia-container').forEach(cell => {
        // Remover todos os event listeners
        const newCell = cell.cloneNode(true);
        cell.parentNode.replaceChild(newCell, cell);
    });
    
    // Adicionar novos eventos de drag and drop
    document.querySelectorAll('.chamado-card').forEach(card => {
        card.setAttribute('draggable', 'true');
        
        // Adicionar evento dragstart
        card.addEventListener('dragstart', function(e) {
            console.log(`üîÑ Drag iniciado para OS #${this.getAttribute('data-os-id')}`);
            
            // Armazenar refer√™ncia ao elemento arrastado
            window.draggedElement = this;
            
            // Adicionar classe de arrastar
            this.classList.add('dragging');
            
            // Definir dados de transfer√™ncia
            e.dataTransfer.setData('text/plain', this.getAttribute('data-os-id'));
            e.dataTransfer.effectAllowed = 'move';
        });
        
        // Adicionar evento dragend
        card.addEventListener('dragend', function() {
            console.log(`üîÑ Drag finalizado para OS #${this.getAttribute('data-os-id')}`);
            
            // Remover classe de arrastar
            this.classList.remove('dragging');
            
            // Limpar refer√™ncia ao elemento arrastado
            window.draggedElement = null;
        });
    });
    
    // Adicionar eventos √†s c√©lulas do calend√°rio
    document.querySelectorAll('.dia-container').forEach(cell => {
        // Adicionar evento dragover
        cell.addEventListener('dragover', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // Adicionar classe de hover
            this.classList.add('drag-over');
            
            // Permitir drop
            e.dataTransfer.dropEffect = 'move';
        });
        
        // Adicionar evento dragleave
        cell.addEventListener('dragleave', function() {
            // Remover classe de hover
            this.classList.remove('drag-over');
        });
        
        // Adicionar evento drop
        cell.addEventListener('drop', function(e) {
            console.log('üîÑ Drop detectado');
            
            e.preventDefault();
            e.stopPropagation();
            
            // Remover classe de hover
            this.classList.remove('drag-over');
            
            // Obter ID da OS do elemento arrastado
            let osId;
            
            if (window.draggedElement) {
                osId = window.draggedElement.getAttribute('data-os-id');
            } else {
                osId = e.dataTransfer.getData('text/plain');
            }
            
            if (!osId) {
                console.error('‚ùå ID da OS n√£o encontrado');
                return false;
            }
            
            // Obter data do elemento de destino
            const dateStr = this.getAttribute('data-date');
            if (!dateStr) {
                console.error('‚ùå Data n√£o encontrada no elemento de destino');
                return false;
            }
            
            // Obter ID do usu√°rio do elemento de destino
            const userId = this.getAttribute('data-user-id');
            if (!userId) {
                console.error('‚ùå ID do usu√°rio n√£o encontrado no elemento de destino');
                return false;
            }
            
            // Obter nome do usu√°rio do elemento de destino ou da linha do usu√°rio
            let userName = this.getAttribute('data-user-name');
            if (!userName) {
                // Tentar obter o nome do usu√°rio da linha do usu√°rio
                const usuarioRow = document.querySelector(`.usuario-row[data-user-id="${userId}"]`);
                if (usuarioRow) {
                    const nomeElement = usuarioRow.querySelector('.usuario-nome');
                    if (nomeElement) {
                        userName = nomeElement.textContent.trim();
                    }
                }
            }
            
            console.log(`üîÑ Drop detectado: OS #${osId} para ${dateStr} com usu√°rio ID ${userId}${userName ? ', nome: ' + userName : ''}`);
            
            // Programar OS diretamente com o nome do usu√°rio
            if (userName) {
                // Chamar diretamente programarOSComNomeUsuario para evitar a fun√ß√£o problem√°tica programarOS
                programarOSComNomeUsuarioRadical(osId, dateStr, userName);
            } else {
                // Tentar obter o nome do usu√°rio da lista global
                if (typeof window.usuarios !== 'undefined' && Array.isArray(window.usuarios)) {
                    const usuario = window.usuarios.find(u => u.id == userId);
                    if (usuario && usuario.name) {
                        programarOSComNomeUsuarioRadical(osId, dateStr, usuario.name);
                    } else {
                        console.warn(`‚ö†Ô∏è Nome do usu√°rio n√£o encontrado para ID ${userId}, usando valor padr√£o`);
                        programarOSComNomeUsuarioRadical(osId, dateStr, `T√©cnico #${userId}`);
                    }
                } else {
                    console.error('‚ùå Lista de usu√°rios n√£o encontrada');
                    programarOSComNomeUsuarioRadical(osId, dateStr, `T√©cnico #${userId}`);
                }
            }
            
            return false;
        });
    });
    
    console.log('‚úÖ Sistema de drag and drop radical inicializado com sucesso!');
}

// Fun√ß√£o para programar OS com nome do usu√°rio (vers√£o radical)
function programarOSComNomeUsuarioRadical(osId, dateStr, userName) {
    console.log(`üîÑ Programando OS #${osId} para ${dateStr} com usu√°rio ${userName} (vers√£o radical)`);
    
    // Verificar se a fun√ß√£o original existe
    if (typeof window.programarOSComNomeUsuario === 'function') {
        // Chamar a fun√ß√£o original
        window.programarOSComNomeUsuario(osId, dateStr, userName);
    } else {
        // Implementa√ß√£o alternativa
        const url = `/api/ordens-servico/${osId}/programar`;
        
        // Dados para enviar
        const data = {
            data_programada: dateStr,
            usuario_responsavel: userName,
            status: 'programada'
        };
        
        // Enviar requisi√ß√£o
        fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (response.ok) {
                console.log(`‚úÖ OS #${osId} programada com sucesso para ${dateStr} com usu√°rio ${userName}`);
                
                // Mostrar notifica√ß√£o
                showNotification(`OS #${osId} programada para ${userName}`, 'success');
                
                // Recarregar ordens de servi√ßo
                if (typeof window.loadOrdensServico === 'function') {
                    setTimeout(window.loadOrdensServico, 500);
                }
            } else {
                console.error(`‚ùå Erro ao programar OS #${osId}: ${response.status} ${response.statusText}`);
                
                // Mostrar notifica√ß√£o
                showNotification(`Erro ao programar OS #${osId}`, 'error');
                
                // Tentar m√©todo alternativo
                programarOSLocalmente(osId, dateStr, userName);
            }
        })
        .catch(error => {
            console.error(`‚ùå Erro ao programar OS #${osId}: ${error}`);
            
            // Mostrar notifica√ß√£o
            showNotification(`Erro ao programar OS #${osId}`, 'error');
            
            // Tentar m√©todo alternativo
            programarOSLocalmente(osId, dateStr, userName);
        });
    }
}

// Fun√ß√£o para programar OS localmente (vers√£o radical)
function programarOSLocalmente(osId, dateStr, userName) {
    console.log(`üîÑ Tentando programar OS #${osId} localmente (vers√£o radical)`);
    
    // Verificar se a fun√ß√£o original existe
    if (typeof window.programarOSLocalmente === 'function') {
        // Chamar a fun√ß√£o original
        window.programarOSLocalmente(osId, dateStr, userName);
    } else {
        // Implementa√ß√£o alternativa
        
        // Encontrar a OS na lista
        const os = window.ordensServico.find(o => o.id == osId);
        if (os) {
            // Atualizar dados da OS
            os.data_programada = dateStr;
            os.usuario_responsavel = userName;
            os.status = 'programada';
            
            console.log(`‚úÖ OS #${osId} programada localmente para ${dateStr} com usu√°rio ${userName}`);
            
            // Mostrar notifica√ß√£o
            showNotification(`OS #${osId} programada para ${userName}`, 'success');
            
            // Recarregar ordens de servi√ßo
            if (typeof window.renderPriorityLines === 'function') {
                setTimeout(window.renderPriorityLines, 500);
            }
        } else {
            console.error(`‚ùå OS #${osId} n√£o encontrada na lista`);
            
            // Mostrar notifica√ß√£o
            showNotification(`Erro ao programar OS #${osId}`, 'error');
        }
    }
}

// Fun√ß√£o para mostrar notifica√ß√£o (vers√£o radical)
function showNotification(message, type = 'info') {
    console.log(`üîî Notifica√ß√£o: ${message} (${type})`);
    
    // Verificar se a fun√ß√£o original existe
    if (typeof window.showNotification === 'function') {
        // Chamar a fun√ß√£o original
        window.showNotification(message, type);
    } else {
        // Implementa√ß√£o alternativa
        
        // Remover notifica√ß√µes existentes
        document.querySelectorAll('.notification').forEach(notification => {
            notification.remove();
        });
        
        // Criar elemento de notifica√ß√£o
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // Adicionar ao DOM
        document.body.appendChild(notification);
        
        // Mostrar notifica√ß√£o
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        // Remover notifica√ß√£o ap√≥s 5 segundos
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 5000);
    }
}

// Sobrescrever a fun√ß√£o desprogramarOS para reinicializar os eventos ap√≥s desprograma√ß√£o
if (typeof window.desprogramarOS === 'function') {
    console.log('‚úÖ Fun√ß√£o desprogramarOS encontrada, aplicando corre√ß√£o radical...');
    
    // Salvar a fun√ß√£o original
    window.desprogramarOS_original = window.desprogramarOS;
    
    // Sobrescrever a fun√ß√£o
    window.desprogramarOS = function(osId) {
        console.log(`üîß Fun√ß√£o desprogramarOS radical executada para OS #${osId}`);
        
        // Chamar a fun√ß√£o original
        const result = window.desprogramarOS_original(osId);
        
        // Ap√≥s desprograma√ß√£o, reinicializar o sistema de drag and drop
        setTimeout(function() {
            console.log('üîÑ Desprograma√ß√£o conclu√≠da, reinicializando sistema de drag and drop...');
            inicializarDragDropRadical();
            
            // For√ßar a recria√ß√£o dos cards de OS
            setTimeout(function() {
                console.log('üîÑ For√ßando renderiza√ß√£o das linhas de prioridade...');
                if (typeof window.renderPriorityLines === 'function') {
                    window.renderPriorityLines();
                    
                    // Reinicializar novamente ap√≥s renderiza√ß√£o
                    setTimeout(inicializarDragDropRadical, 500);
                }
            }, 500);
        }, 1000);
        
        return result;
    };
}

// Fun√ß√£o para adicionar atributos data-user-name a todos os elementos de usu√°rio
function adicionarAtributosUsuario() {
    console.log('üîß Adicionando atributos de usu√°rio (vers√£o radical)...');
    
    // Encontrar todos os elementos de usu√°rio
    const usuarioRows = document.querySelectorAll('.usuario-row');
    usuarioRows.forEach(function(row) {
        // Verificar se j√° tem o atributo data-user-name
        if (!row.hasAttribute('data-user-name')) {
            // Obter nome do usu√°rio
            const nomeElement = row.querySelector('.usuario-nome');
            if (nomeElement) {
                const nome = nomeElement.textContent.trim();
                row.setAttribute('data-user-name', nome);
                console.log(`‚úÖ Atributo data-user-name adicionado: ${nome}`);
            }
        }
        
        // Adicionar atributo data-user-name aos dias da semana
        const userId = row.getAttribute('data-user-id');
        if (userId) {
            const diasContainer = document.querySelectorAll(`.dia-container[data-user-id="${userId}"]`);
            diasContainer.forEach(function(dia) {
                if (!dia.hasAttribute('data-user-name')) {
                    const nome = row.getAttribute('data-user-name');
                    if (nome) {
                        dia.setAttribute('data-user-name', nome);
                        console.log(`‚úÖ Atributo data-user-name adicionado ao dia: ${nome}`);
                    }
                }
            });
        }
    });
}

// Aplicar corre√ß√µes quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß DOM carregado, aplicando solu√ß√£o radical...');
    
    // Adicionar atributos de usu√°rio
    setTimeout(adicionarAtributosUsuario, 500);
    
    // Inicializar sistema de drag and drop radical
    setTimeout(inicializarDragDropRadical, 1000);
});

// Aplicar corre√ß√µes imediatamente se o DOM j√° estiver carregado
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log('üîß DOM j√° carregado, aplicando solu√ß√£o radical imediatamente...');
    
    // Adicionar atributos de usu√°rio
    setTimeout(adicionarAtributosUsuario, 500);
    
    // Inicializar sistema de drag and drop radical
    setTimeout(inicializarDragDropRadical, 1000);
}

// Configurar um observador para adicionar atributos a novos elementos
const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Verificar se novos elementos foram adicionados
            setTimeout(function() {
                adicionarAtributosUsuario();
                inicializarDragDropRadical();
            }, 100);
        }
    });
});

// Configurar observador para todo o documento
observer.observe(document.body, {
    childList: true,
    subtree: true
});

// Adicionar bot√£o de reinicializa√ß√£o
function adicionarBotaoReinicializacao() {
    console.log('üîß Adicionando bot√£o de reinicializa√ß√£o...');
    
    // Criar bot√£o
    const botao = document.createElement('button');
    botao.textContent = 'üîÑ Reinicializar Drag & Drop';
    botao.style.position = 'fixed';
    botao.style.bottom = '20px';
    botao.style.right = '20px';
    botao.style.zIndex = '9999';
    botao.style.padding = '10px 15px';
    botao.style.backgroundColor = '#6c5ce7';
    botao.style.color = 'white';
    botao.style.border = 'none';
    botao.style.borderRadius = '5px';
    botao.style.cursor = 'pointer';
    botao.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
    
    // Adicionar evento de clique
    botao.addEventListener('click', function() {
        console.log('üîÑ Reinicializando sistema de drag and drop manualmente...');
        inicializarDragDropRadical();
        showNotification('Sistema de drag and drop reinicializado', 'info');
    });
    
    // Adicionar ao DOM
    document.body.appendChild(botao);
}

// Adicionar bot√£o de reinicializa√ß√£o
setTimeout(adicionarBotaoReinicializacao, 2000);

console.log('‚úÖ Solu√ß√£o radical para drag and drop carregada com sucesso!');

